name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 1. Java 설정
      - name: Set up JDK 22
        uses: actions/setup-java@v3
        with:
          java-version: '22'
          distribution: 'temurin'

      # 2. Gradle Wrapper에 실행 권한을 부여합니다.
      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      # 3. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      # 4. Docker 이미지 빌드
      - name: Docker image build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/github-actions-demo .

      # 5. DockerHub 로그인
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Docker Hub 이미지 푸시
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/github-actions-demo

  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 풀받습니다
      - name: Docker pull

        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/github-actions-demo

      # 2. 기존 컨테이너를 중지 및 삭제
      - name: Stop and remove existing containers
        run: |
          CONTAINER_IDS=$(sudo docker ps -q)
          if [ -n "$CONTAINER_IDS" ]; then
            sudo docker stop $CONTAINER_IDS
            sudo docker rm $CONTAINER_IDS
          fi

      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: Run new container
        run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/github-actions-demo

      # 4. 미사용 이미지를 정리합니다
      - name: Clean up old Docker images
        run: sudo docker system prune -f