name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 22
        uses: actions/setup-java@v3
        with:
          java-version: '22'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      - name: create resources folder if not exists
        run: mkdir -p src/main/resources

      - name: set up application.properties
        run: echo "${{ secrets.APPLICATION }}" > src/main/resources/application.properties

      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      - name: Docker image build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/classfit-dev:blue .

      - name: Tag image for green environment
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/classfit-dev:blue ${{ secrets.DOCKER_USERNAME }}/classfit-dev:green

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/classfit-dev:blue
          docker push ${{ secrets.DOCKER_USERNAME }}/classfit-dev:green

  deploy-blue-environment:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: Pull blue Docker image
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/classfit-dev:blue

      - name: Stop and remove existing blue containers
        run: |
          CONTAINER_IDS=$(sudo docker ps -aq --filter "name=classfit-blue") 
          if [ -n "$CONTAINER_IDS" ]; then
            sudo docker stop $CONTAINER_IDS || true
            sudo docker rm $CONTAINER_IDS || true
          else
            echo "No blue containers to stop or remove."
          fi
          sudo docker ps -a  # (Optional) List all containers to ensure none are running

      - name: Run new blue container
        run: sudo docker run --name classfit-blue --rm -d -p 8080:8080 -v /home/ec2-user/app/logs:/log ${{ secrets.DOCKER_USERNAME }}/classfit-dev:blue

  deploy-green-environment:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: Pull green Docker image
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/classfit-dev:green

      - name: Stop and remove existing green containers
        run: |
          CONTAINER_IDS=$(sudo docker ps -aq --filter "name=classfit-green") 
          if [ -n "$CONTAINER_IDS" ]; then
            sudo docker stop $CONTAINER_IDS || true
            sudo docker rm $CONTAINER_IDS || true
          else
            echo "No green containers to stop or remove."
          fi

      - name: Run new green container
        run: sudo docker run --name classfit-green --rm -d -p 8081:8080 -v /home/ec2-user/app/logs:/log ${{ secrets.DOCKER_USERNAME }}/classfit-dev:green
